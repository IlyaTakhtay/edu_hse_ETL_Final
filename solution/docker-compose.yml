name: etl_module3

x-airflow-common: &x-airflow-common
    build: ./airflow  # Используем кастомный образ вместо стандартного
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_ROOT_USER}:${POSTGRES_ROOT_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      MONGO_DB: ${MONGO_DB}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
    networks:
      - app-network
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_ROOT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ROOT_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
  datagen:
    build: ./datagen
    container_name: datagen
    entrypoint: ["sleep", "infinity"]  # Контейнер запустится, но не выполнит логику генерации
    depends_on:
        mongodb:
          condition: service_healthy
    networks:
      - app-network
    restart: on-failure
    # env_file: # весь env грузить not safety конечно, ну лан # когда-нибудь будет фикс
    #   - .env
    environment:
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - AMOUNT_USERS=${AMOUNT_USERS}
      - AMOUNT_PRODUCTS=${AMOUNT_PRODUCTS}
      - AMOUNT_SESSIONS=${AMOUNT_SESSIONS}
      - AMOUNT_EVENTS=${AMOUNT_EVENTS}
      - AMOUNT_TICKETS=${AMOUNT_TICKETS}
      - AMOUNT_REVIEWS=${AMOUNT_REVIEWS}
      - AMOUNT_QUERIES=${AMOUNT_QUERIES}

  # Инициализатор Airflow
  airflow-init:
    <<: *x-airflow-common
    container_name: airflow_init
    entrypoint:
        - "/bin/bash"
        - "-c"
        - |
            airflow db init &&
            airflow db upgrade &&
            airflow users create \
              --username ${AIRFLOW_ADMIN_USERNAME} \
              --firstname Admin \
              --lastname User \
              --role Admin \
              --email ${AIRFLOW_ADMIN_EMAIL} \
              --password ${AIRFLOW_ADMIN_PASSWORD} &&
            # Проверка и добавление подключения MongoDB
            airflow connections get etl_mongo_conn >/dev/null 2>&1 || \
            airflow connections add 'etl_mongo_conn' \
              --conn-type 'mongo' \
              --conn-host ${MONGO_HOST} \
              --conn-schema ${MONGO_DB} \
              --conn-login ${MONGO_ROOT_USERNAME} \
              --conn-password ${MONGO_ROOT_PASSWORD} \
              --conn-port ${MONGO_PORT} \
              --conn-extra '{"srv": false, "ssl": false, "allow_insecure": true, "authSource": "admin"}' &&
            # Проверка и добавление подключения PostgreSQL
            airflow connections get postgres_conn >/dev/null 2>&1 || \
            airflow connections add 'postgres_conn' \
              --conn-type 'postgres' \
              --conn-host 'postgres' \
              --conn-schema ${POSTGRES_DB} \
              --conn-login ${POSTGRES_USER} \
              --conn-password ${POSTGRES_PASSWORD} \
              --conn-port ${POSTGRES_PORT}

    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # Веб-сервер Airflow
  airflow-webserver:
    <<: *x-airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8081:8080"
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Планировщик Airflow
  airflow-scheduler:
    <<: *x-airflow-common
    container_name: airflow_scheduler
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully


volumes:
  mongodb-data:
  postgres-data:

networks:
  app-network:
    driver: bridge
